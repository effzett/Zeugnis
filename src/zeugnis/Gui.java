/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package zeugnis;

import com.itextpdf.text.DocumentException;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListCellRenderer;
import static javax.swing.SwingConstants.CENTER;
import javax.swing.UIManager;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

/**
 *
 * @author juergen
 */
public class Gui extends javax.swing.JFrame implements TableModelListener {

    private final static Logger logger = Logger.getLogger(Gui.class.getName());
    private final SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
    private static int sYear = 0;
    private static int hYear = 0;
    private static String selectedSubject = null;
    private static String sClass = null;
    private SingletonSQLConnector connector = null;
    private Config config = null;
    private boolean tableModelEventEnabled = true;
    private Hashtable<Integer, Integer> idKriterien = null;
    private JComboBox stringBox = null;
    private JComboBox imageBox = null;
    private String version = this.getClass().getPackage().getImplementationVersion();
    private String vendor = this.getClass().getPackage().getImplementationVendor();
    private String title = this.getClass().getPackage().getImplementationTitle();
    

    /**
     * Creates new form Gui
     */
    public Gui() {
        config = Config.getInstance();
        connector = SingletonSQLConnector.getInstance();
        stringBox = this.getStringBox();
        imageBox = this.getImageBox();
        initComponents();
        sYear = Integer.parseInt(((String) jComboBox1.getSelectedItem()).substring(0, 4));
        hYear = Integer.parseInt((String) jComboBox2.getSelectedItem());
        sClass = (String) jComboBox3.getSelectedItem();
        fillClassTable();
        fillKriteriumTable();
        fillLernbereichTable();
        fillSubjectComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jSpinner2 = new javax.swing.JSpinner();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jComboBox5 = new javax.swing.JComboBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jComboBox6 = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jComboBox7 = new javax.swing.JComboBox<>();
        jComboBox8 = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        jDialog1.setMinimumSize(new java.awt.Dimension(30, 20));
        jDialog1.setSize(new java.awt.Dimension(400, 200));

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Version: ");
        jLabel10.setText(version);
        if(version==null){
            jLabel10.setText("1.2-alpha");
        }

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Autor:");
        jLabel11.setText(vendor);
        if(vendor==null){
            jLabel11.setText("Team 0");
        }

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Titel:");
        jLabel12.setText(title);
        if(title==null){
            jLabel12.setText("Zeugnisverwaltung Grundschule Brelingen");
        }

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addContainerGap(58, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Zeugnisverwaltung");
        setIconImage((new ImageIcon(getClass().getResource("/zeugnis/pics/testimony_icon.png"))).getImage());

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                changeTab(evt);
            }
        });

        // Da sich die Schueler id (Primary Key) aus den Spalten Name,
        // Vorname oder Geburtdatum zusammensetzt, kann sie nicht mehr ermittelt
        // werden wenn eines der Felder editiert wird. Daher muß die Id in der
        // ersten verdeckten Spalte mitgeführt und ggf nach dem Insert oder Update
        // eines Schuelers auf Stand gehalten werden.
        DefaultTableModel tableModel = new javax.swing.table.DefaultTableModel(
            new String [] {
                "Id", "Name", "Vorname", "Geburtsdatum", "Geburtsort", "Löschen", "Zeugnis drucken"
            }, 7);
            tableModel.addTableModelListener(this);
            jTable1.setModel(tableModel);
            jTable1.setCellSelectionEnabled(true);
            jTable1.setRowHeight(25);
            jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            TableColumn column = jTable1.getColumnModel().getColumn(0);
            column.setWidth(0);
            column.setMaxWidth(0);
            column.setMinWidth(0);
            column = jTable1.getColumnModel().getColumn(3);
            column.setCellEditor(new zeugnis.DateCellEditor());
            column.setMaxWidth(85);
            column.setMinWidth(85);
            column = jTable1.getColumnModel().getColumn(5);
            column.setCellEditor(new zeugnis.DeleteCellEditor());
            column.setCellRenderer(new IconCellRenderer());
            column.setMaxWidth(60);
            column.setMinWidth(60);
            column = jTable1.getColumnModel().getColumn(6);
            column.setCellEditor(new PdfCellEditor());
            column.setCellRenderer(new IconCellRenderer());
            column.setMaxWidth(98);
            column.setMinWidth(98);
            jScrollPane1.setViewportView(jTable1);

            jButton1.setText("Neue Zeile");
            jButton1.setActionCommand("Neu");
            jButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    addRow(evt);
                }
            });

            jButton3.setText("Pdf's erzeugen");
            jButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    createPdfForClass(evt);
                }
            });

            javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
            jPanel2.setLayout(jPanel2Layout);
            jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jButton1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jButton3)
                    .addContainerGap(537, Short.MAX_VALUE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 794, Short.MAX_VALUE))
            );
            jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addGap(0, 406, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton3)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 76, Short.MAX_VALUE)))
            );

            jTabbedPane1.addTab("Schulklassen", jPanel2);

            jLabel4.setText("Schüler");

            jComboBox4.setRenderer(new DefaultListCellRenderer(){

                public Component getListCellRendererComponent(JList list,
                    Object value,
                    int index,
                    boolean isSelected,
                    boolean cellHasFocus) {

                    super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

                    if(value instanceof String[]){
                        String[] puple = (String[])value;
                        setText(puple[0]);
                    }
                    /*
                    Color background;
                    Color foreground;

                    // check if this cell represents the current DnD drop location
                    JList.DropLocation dropLocation = list.getDropLocation();
                    if (dropLocation != null
                        && !dropLocation.isInsert()
                        && dropLocation.getIndex() == index) {

                        background = Color.BLUE;
                        foreground = Color.WHITE;

                        // check if this cell is selected
                    } else if (isSelected) {
                        background = Color.RED;
                        foreground = Color.WHITE;

                        // unselected, and not the DnD drop location
                    } else {
                        background = Color.WHITE;
                        foreground = Color.BLACK;
                    };

                    setBackground(background);
                    setForeground(foreground);
                    */
                    return this;
                }

            });
            jComboBox4.setModel(new javax.swing.DefaultComboBoxModel());
            jComboBox4.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    changePuple(evt);
                }
            });

            jLabel5.setText("Lernentwicklungsbericht");

            jTextArea1.setColumns(20);
            jTextArea1.setRows(5);
            jTextArea1.addFocusListener(new java.awt.event.FocusAdapter() {
                public void focusLost(java.awt.event.FocusEvent evt) {
                    jTextArea1FocusLost(evt);
                }
            });
            jScrollPane2.setViewportView(jTextArea1);

            jLabel6.setText("Bemerkungen");

            jTextField1.setColumns(20);
            jTextField1.setText("Wird versetzt nach Klasse...");
            jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
                public void focusLost(java.awt.event.FocusEvent evt) {
                    jTextField1FocusLost(evt);
                }
            });

            jLabel7.setText("Fehltage");

            jSpinner1.setModel(new javax.swing.SpinnerNumberModel());
            jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
                public void stateChanged(javax.swing.event.ChangeEvent evt) {
                    jSpinner1StateChanged(evt);
                }
            });

            jLabel8.setText("unentschuldigte Fehltage");

            jSpinner2.setModel(new javax.swing.SpinnerNumberModel());
            jSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {
                public void stateChanged(javax.swing.event.ChangeEvent evt) {
                    jSpinner2StateChanged(evt);
                }
            });

            tableModel = new javax.swing.table.DefaultTableModel(
                new String [] {
                    "Indikatoren", "Bewertung"
                }, 2);

                tableModel.addTableModelListener(this);
                jTable2.setModel(tableModel);
                jTable2.setRowHeight(25);
                jTable2.setRowSelectionAllowed(false);
                jTable2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
                jScrollPane3.setViewportView(jTable2);

                jLabel9.setText("Lernbereiche");

                jComboBox5.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        changeSubject(evt);
                    }
                });

                jCheckBox1.setText("vollständig");
                jCheckBox1.setEnabled(false);

                jComboBox6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "entspricht nicht den Erwartungen", "entspricht den Erwartungen mit Einschränkungen", "entspricht den Erwartungen", "entspricht den Erwartungen in vollem Umfang", "verdient besondere Anerkennung" }));
                jComboBox6.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jComboBox6ActionPerformed(evt);
                    }
                });

                javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
                jPanel3.setLayout(jPanel3Layout);
                jPanel3Layout.setHorizontalGroup(
                    jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel9)
                            .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel7))
                                .addGap(31, 31, 31)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCheckBox1))
                                .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                            .addComponent(jComboBox6, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                );
                jPanel3Layout.setVerticalGroup(
                    jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(4, 4, 4)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBox1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(47, Short.MAX_VALUE))
                );

                jTabbedPane1.addTab("Zeugnisse", jPanel3);

                tableModel = new javax.swing.table.DefaultTableModel(
                    new String [] {
                        "Schuljahr", "Lernbereich", "Indikator", "Text"
                    }, 4);
                    tableModel.addTableModelListener(this);
                    jTable3.setModel(tableModel);
                    TableColumn col30 = jTable3.getColumnModel().getColumn(0);
                    col30.setMinWidth(57);
                    col30.setMaxWidth(57);
                    TableColumn col31 = jTable3.getColumnModel().getColumn(1);
                    col31.setMinWidth(74);
                    col31.setMaxWidth(74);
                    TableColumn col32 = jTable3.getColumnModel().getColumn(2);
                    col32.setMinWidth(70);
                    col32.setMaxWidth(70);
                    jScrollPane4.setViewportView(jTable3);

                    jLabel13.setText("Indikatoren");

                    tableModel = new javax.swing.table.DefaultTableModel(
                        new String [] {
                            "Schuljahr", "Klassenstufe", "Lernbereich", "Text"
                        }, 4);
                        //tableModel.addTableModelListener(this);
                        jTable4.setModel(tableModel);
                        TableColumn col40 = jTable4.getColumnModel().getColumn(0);
                        col40.setMinWidth(57);
                        col40.setMaxWidth(57);
                        TableColumn col41 = jTable4.getColumnModel().getColumn(1);
                        col41.setMinWidth(74);
                        col41.setMaxWidth(74);
                        TableColumn col42 = jTable4.getColumnModel().getColumn(2);
                        col42.setMinWidth(70);
                        col42.setMaxWidth(70);
                        jScrollPane5.setViewportView(jTable4);

                        jLabel14.setText("Lernbereiche");

                        jLabel15.setText("Symbol1");

                        jComboBox7.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Symbol 1", "Symbol 2", "Symbol 3", "Symbol 4", "Symbol 5", "Symbol 6", "Symbol 7", "Symbol 8", "Symbol 9", "Symbol 10", "Symbol 11", "Symbol 12", "Symbol 13", "Symbol 14" }));
                        jComboBox7.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jComboBox7ActionPerformed(evt);
                            }
                        });

                        jComboBox8.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Symbol 1", "Symbol 2", "Symbol 3", "Symbol 4", "Symbol 5", "Symbol 6", "Symbol 7", "Symbol 8", "Symbol 9", "Symbol 10", "Symbol 11", "Symbol 12", "Symbol 13", "Symbol 14" }));
                        jComboBox8.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jComboBox8ActionPerformed(evt);
                            }
                        });

                        jLabel16.setText("Symbol2");

                        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
                        jPanel5.setLayout(jPanel5Layout);
                        jPanel5Layout.setHorizontalGroup(
                            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel15)
                                    .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(23, 23, 23))
                        );
                        jPanel5Layout.setVerticalGroup(
                            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(35, Short.MAX_VALUE))
                        );

                        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

                        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
                        jPanel4.setLayout(jPanel4Layout);
                        jPanel4Layout.setHorizontalGroup(
                            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
                                    .addComponent(jScrollPane5)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel14)
                                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                        );
                        jPanel4Layout.setVerticalGroup(
                            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(248, Short.MAX_VALUE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                    .addComponent(jSeparator1)))
                        );

                        jTabbedPane1.addTab("Konfiguration", jPanel4);
                        //jTabbedPane1.setEnabledAt(2,false);

                        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
                        jPanel1.setLayout(jPanel1Layout);
                        jPanel1Layout.setHorizontalGroup(
                            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jTabbedPane1)
                                .addContainerGap())
                        );
                        jPanel1Layout.setVerticalGroup(
                            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTabbedPane1)
                        );

                        jLabel1.setText("Schuljahr");

                        try{
                            String[] sYears = connector.fetchSYears();

                            if(sYears.length == 0) {
                                sYears = new String[1];
                                SimpleDateFormat sf = new SimpleDateFormat("MMyyyy");
                                String curr = sf.format(Calendar.getInstance().getTime());

                                if(Integer.parseInt(curr.substring(0,1)) < 6 ) {
                                    sYears[0] = (Integer.parseInt(curr.substring(2)) -1) +  "/" + curr.substring(4);
                                } else {
                                    sYears[0] = curr.substring(2) + "/" + (Integer.parseInt(curr.substring(4)) + 1);
                                }

                            }
                            jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(sYears));
                        } catch(SQLException ex) {
                            logger.severe(ex.getLocalizedMessage());
                        }
                        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                changeSYear(evt);
                            }
                        });

                        jLabel2.setText("Halbjahr");

                        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2" }));
                        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                changeHYear(evt);
                            }
                        });

                        jLabel3.setText("Klasse");

                        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel( config.getProperty("classes").split(",")));
                        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                changeSClass(evt);
                            }
                        });

                        jMenu1.setText("Datei");

                        jMenuItem1.setText("Beenden");
                        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jMenuItem1ActionPerformed(evt);
                            }
                        });
                        jMenu1.add(jMenuItem1);

                        jMenuBar1.add(jMenu1);

                        jMenu2.setText("Bearbeiten");

                        jMenuItem2.setText("Neues Schuljahr anlegen");
                        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                addSchoolYear(evt);
                            }
                        });
                        jMenu2.add(jMenuItem2);

                        jMenuBar1.add(jMenu2);

                        jMenu3.setText("Hilfe");

                        jMenuItem4.setText("Dokumentation");
                        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jMenuItem4ActionPerformed(evt);
                            }
                        });
                        jMenu3.add(jMenuItem4);

                        jMenuItem3.setText("Info");
                        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jMenuItem3ActionPerformed(evt);
                            }
                        });
                        jMenu3.add(jMenuItem3);

                        jMenuBar1.add(jMenu3);

                        setJMenuBar(jMenuBar1);

                        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                        getContentPane().setLayout(layout);
                        layout.setHorizontalGroup(
                            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                        );
                        layout.setVerticalGroup(
                            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)
                                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                        );

                        pack();
                    }// </editor-fold>//GEN-END:initComponents

    private void fillClassTable() {

        try {
            connector.fillClassTable(jTable1, ((String) jComboBox1.getSelectedItem()).substring(0, 4), sClass);
        } catch (SQLException ex) {
            logger.severe(ex.getLocalizedMessage());
        }

    }
    
    private void fillKriteriumTable(){
        try {
            connector.fillKriteriumTable(jTable3, String.valueOf(sYear), sClass);
        } catch (SQLException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }

    
    private void fillLernbereichTable(){
        try {
            connector.fillLernbereichTable(jTable4, String.valueOf(sYear), sClass);
        } catch (SQLException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void addRow(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRow
        String datePattern = "dd.MM.yyyy";
        SimpleDateFormat dateFormatter = new SimpleDateFormat(datePattern);
        Object[] row = {"", "", "",
            dateFormatter.format(Calendar.getInstance().getTime()), "",};
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.addRow(row);
    }//GEN-LAST:event_addRow

    private void changeSYear(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeSYear
        sYear = Integer.parseInt(((String) jComboBox1.getSelectedItem()).substring(0, 4));
        fillPupleComboBox();
        fillSubjectComboBox();
        fillClassTable();
        fillKriteriumTable();
        fillLernbereichTable();
        fillTabFromTestimony();
    }//GEN-LAST:event_changeSYear

    private void changeHYear(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeHYear
        hYear = Integer.parseInt((String) jComboBox2.getSelectedItem());
        fillTabFromTestimony();
        selectedSubject = (String) jComboBox5.getSelectedItem();
        fillTestimonyTable(selectedSubject);
    }//GEN-LAST:event_changeHYear

    private void changeSClass(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeSClass
        sClass = (String) jComboBox3.getSelectedItem();
        fillPupleComboBox();
        fillSubjectComboBox();
        fillClassTable();
        fillKriteriumTable();
        fillLernbereichTable();
    }//GEN-LAST:event_changeSClass
    
    private void createPdfForClass(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPdfForClass
        // Zunächst Liste aller Zeugnisse erzeugen
        
        // Für jedes Zeugnis, Zeugnis in einen definierten Ordner speichern
        ArrayList<Integer> liste = new ArrayList<>();                
        try {
            liste = connector.listIdSchueler();
        } catch (SQLException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
        for(Integer idSchueler: liste){
            try {
                ZeugnisPDF zeugnis = new ZeugnisPDF(idSchueler);    // holt Werte aus DB -> private Variables
                zeugnis.CreatePDF();    // uses private Variables to print pdf
            } catch (IOException | DocumentException | SQLException | ParseException ex) {
                Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_createPdfForClass

    private void addSchoolYear(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSchoolYear
        try {

            // Es können höchstens bis zu aktuellen Jahr Schuljahr erzeugt werden.
            // Aktuelles Jahr z.B. 2015 = Schuljahr 2015 = Jahrgang 2015/16

            Integer newYear = connector.getMaxSchuljahrFromZeugnis() + 1;
            SimpleDateFormat sf = new SimpleDateFormat("yyyy");
            String curr = sf.format(Calendar.getInstance().getTime());

            if (newYear <= Integer.parseInt(curr)) {
                connector._generateNewYear(newYear);
                
                // Funktioniert nur bis zum Jahr 2099 :-)
                jComboBox1.addItem(Integer.toString(newYear) + "/" + Integer.toString(newYear - 1999));
            }

        } catch (SQLException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_addSchoolYear

    private void changeTab(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_changeTab

        jComboBox2.setEnabled((jTabbedPane1.getSelectedIndex() == 1));

        if (jTabbedPane1.getSelectedIndex() == 1) { // Zeugnis
            Integer idSchueler;
            Integer idZeugnis;
            fillPupleComboBox();
            fillTestimonyTable((String) jComboBox5.getItemAt(0));
            try {
                fillTestimonyNote((String) jComboBox5.getItemAt(0));
            } catch (SQLException ex) {
                Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (jComboBox4.getSelectedItem() != null) {
                idSchueler = Integer.parseInt(((String[]) jComboBox4.getSelectedItem())[1]);
                idZeugnis = connector._getIdZeugnis(idSchueler, hYear);
            } else {
                return;
            }

            try {
                if (connector.isZeugnisComplete(idZeugnis)) {
                    jCheckBox1.setSelected(true);
                } else {
                    jCheckBox1.setSelected(false);
                }
            } catch (SQLException ex) {
                Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (jTabbedPane1.getSelectedIndex() == 2) { // Konfiguration
            jComboBox7.setSelectedIndex(Integer.parseInt(config.getProperty("symbol1"))-1);
            jComboBox8.setSelectedIndex(Integer.parseInt(config.getProperty("symbol2"))-1);
            try {
                connector.fillKriteriumTable(jTable3,String.valueOf(sYear),sClass);
                connector.fillLernbereichTable(jTable4,String.valueOf(sYear),sClass);
            } catch (SQLException ex) {
                Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_changeTab

    private void changeSubject(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeSubject
        selectedSubject = (String) jComboBox5.getSelectedItem();
        fillTestimonyTable(selectedSubject);
        try {
            fillTestimonyNote(selectedSubject);
        } catch (SQLException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_changeSubject

    private void changePuple(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePuple
        fillTabFromTestimony();
        selectedSubject = (String) jComboBox5.getSelectedItem();
        fillTestimonyTable(selectedSubject);
    }//GEN-LAST:event_changePuple

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        // Store properties
        Config conf = Config.getInstance();
        conf.storeProperties();
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        jDialog1.setLocationRelativeTo(this);
        jDialog1.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost
        // TODO add your handling code here:
        // Provisorium zum Testen...
        Integer idSchueler;
        Integer idZeugnis;
        
        if (jComboBox4.getSelectedItem() != null) {
            idSchueler = Integer.parseInt( ( (String[]) jComboBox4.getSelectedItem())[1]);
            idZeugnis = connector._getIdZeugnis(idSchueler, hYear);
        }
        else{
            return;
        }
        String[] values = {idZeugnis.toString(),null,null,null,null,null,null,jTextField1.getText(),null,null};
        try {
            connector.updateZeugnis(values);
        } catch (SQLException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jTextField1FocusLost

    private void jTextArea1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextArea1FocusLost
        // TODO add your handling code here:
        // Provisorium zum Testen...
        Integer idSchueler;
        Integer idZeugnis;
        
        if (jComboBox4.getSelectedItem() != null) {
            idSchueler = Integer.parseInt( ( (String[]) jComboBox4.getSelectedItem())[1]);
            idZeugnis = connector._getIdZeugnis(idSchueler, hYear);
        }
        else{
            return;
        }
        String[] values = {idZeugnis.toString(),null,null,null,null,null,jTextArea1.getText(),null,null,null};
        try {
            connector.updateZeugnis(values);
        } catch (SQLException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jTextArea1FocusLost

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        // TODO add your handling code here:
        // Provisorium zum Testen...
        Integer idSchueler;
        Integer idZeugnis;
        
        if (jComboBox4.getSelectedItem() != null) {
            idSchueler = Integer.parseInt( ( (String[]) jComboBox4.getSelectedItem())[1]);
            idZeugnis = connector._getIdZeugnis(idSchueler, hYear);
        }
        else{
            return;
        }
        String[] values = {idZeugnis.toString(),null,null,null,String.valueOf((Integer)jSpinner1.getValue()),null,null,null,null,null};
        try {
            connector.updateZeugnis(values);
        } catch (SQLException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }//GEN-LAST:event_jSpinner1StateChanged

    private void jSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner2StateChanged
        // TODO add your handling code here:
        // Provisorium zum Testen...
        Integer idSchueler;
        Integer idZeugnis;
        
        if (jComboBox4.getSelectedItem() != null) {
            idSchueler = Integer.parseInt( ( (String[]) jComboBox4.getSelectedItem())[1]);
            idZeugnis = connector._getIdZeugnis(idSchueler, hYear);
        }
        else{
            return;
        }
        String[] values = {idZeugnis.toString(),null,null,null,null,String.valueOf((Integer)jSpinner2.getValue()),null,null,null,null};
        try {
            connector.updateZeugnis(values);
        } catch (SQLException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jSpinner2StateChanged

    private void jComboBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox6ActionPerformed
        // TODO add your handling code here:
        Integer idSchueler;
        Integer idZeugnis;
        Integer note=jComboBox6.getSelectedIndex();
        
        if (jComboBox4.getSelectedItem() != null) {
            idSchueler = Integer.parseInt( ( (String[]) jComboBox4.getSelectedItem())[1]);
            idZeugnis = connector._getIdZeugnis(idSchueler, hYear);
        }
        else{
            return;
        }

        if(jComboBox5.getSelectedItem().equals("Arbeitsverhalten") || jComboBox5.getSelectedItem().equals("Sozialverhalten")) {
            
            if (jComboBox5.getSelectedItem().equals("Arbeitsverhalten")) {// Bestimmen, ob gerade Arbeit oder Sozial angezeigt wird
                try { // Arbeit
                    String[] values = {idZeugnis.toString(), null, String.valueOf(note), null, null, null, null, null, null, null};
                    connector.updateZeugnis(values);
                } catch (SQLException ex) {
                    Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else { //  Sozial
                try {
                    String[] values = {idZeugnis.toString(), null, null, String.valueOf(note), null, null, null, null, null, null};
                    connector.updateZeugnis(values);
                } catch (SQLException ex) {
                    Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        try {
            if(connector.isZeugnisComplete(idZeugnis)){
                jCheckBox1.setSelected(true);
            }
            else{
                jCheckBox1.setSelected(false);

            }
        } catch (SQLException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBox6ActionPerformed

    private void jComboBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox7ActionPerformed
        // TODO add your handling code here:
        config.setProperty("symbol1",String.valueOf(jComboBox7.getSelectedIndex()+1) );
        ZeugnisPDF.setSymbol1( (jComboBox7.getSelectedIndex()+1) );

    }//GEN-LAST:event_jComboBox7ActionPerformed

    private void jComboBox8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox8ActionPerformed
        // TODO add your handling code here:
        config.setProperty("symbol2",String.valueOf(jComboBox8.getSelectedIndex()+1) );
        ZeugnisPDF.setSymbol2( (jComboBox8.getSelectedIndex()+1) );
    }//GEN-LAST:event_jComboBox8ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        String inputPdf = "pics/zeugnis.pdf";
        Path tempOutput=null;
        try {
            tempOutput = Files.createTempFile("TempManualZeugnis", ".pdf");
            tempOutput.toFile().deleteOnExit();
            InputStream is = this.getClass().getResourceAsStream(inputPdf);
            Files.copy(is, tempOutput, StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Desktop desktop = Desktop.getDesktop();
        if (desktop != null && desktop.isSupported(Desktop.Action.OPEN)) {
            try {
                desktop.open(tempOutput.toFile());
            } catch (IOException ex) {
                Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.err.println("PDF-Datei kann nicht angezeigt werden: " + tempOutput.toFile().getPath());
        }

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    
    public void fillTabFromTestimony() {
        if (jComboBox4.getSelectedItem() != null) {
            String idSchueler = ((String[]) jComboBox4.getSelectedItem())[1];

            try {
                String[] testimony = connector.fetchZeugnis(Integer.parseInt(idSchueler), hYear);

                if (testimony[6] != null) {
                    jTextArea1.setText(testimony[6]);
                }
                if (testimony[7] != null) {
                    jTextField1.setText(testimony[7]);
                }
                if (testimony[4] != null) {
                    jSpinner1.setValue(Integer.parseInt(testimony[4]));
                }
                if (testimony[5] != null) {
                    jSpinner2.setValue(Integer.parseInt(testimony[5]));
                }

                idKriterien = connector.getID_KriterienZeugnis(Integer.parseInt(testimony[0]));
            } catch (SQLException ex) {
                logger.severe(ex.getLocalizedMessage());
            }
        }

    }

    /**
     * Die ComboBox wird neu befuellt wenn: Auf den Reiter Zeugnis gewechselt
     * wird um den aktuellen Stand zu haben falls im Reiter Schulklassen Schüler
     * ediert, hinzugefuegt oder geloescht wurden. Ein anderes Schuljahr
     * ausgewählt wird. ComboBox1 Schuljahr Eine andere Klasse ausgewählt wird.
     * ComboBox3 Klasse. Auf die ID des Schuelers kann uber
     * (String[])jComboBox4getSelectedItem zugegrigffen werden. Das zweite Feld
     * im String ist die ID_SCHUELER.
     */
    private void fillPupleComboBox() {
        jComboBox4.removeAllItems();

        try {
            ArrayList[] fetchedPuples = connector.fetchPupils(sYear, sClass);

            for (int i = 0; i < fetchedPuples.length; i++) {
                ArrayList<String> puple = fetchedPuples[i];
                jComboBox4.insertItemAt(new String[]{(puple.get(1) + ", " + puple.get(2)), puple.get(0)}, i);
            }

            if (jComboBox4.getItemCount() > 0) {
                jComboBox4.setSelectedIndex(0);
            }

        } catch (SQLException ex) {
            logger.severe(ex.getLocalizedMessage());
        }

    }

    /**
     * Fuellt die jComboBox5 mit den entsprechenden Fächern. Abhaengig von
     * Klasse und Schuljahr. In Abhaengigkeit des Faches wird die Tabelle zur
     * politisch korrrekten Benotung gefuellt.
     */
    private void fillSubjectComboBox() {

        try {
            jComboBox5.setModel(new DefaultComboBoxModel(connector.getLernbereicheIncl0().toArray(new String[0])));
            selectedSubject = (String) jComboBox5.getItemAt(0);
        } catch (SQLException ex) {
            logger.severe(ex.getLocalizedMessage());
        }

        fillTestimonyTable((String) jComboBox5.getItemAt(0));
        try {
            fillTestimonyNote(selectedSubject);
            logger.fine("--------->>>>>>>>"+selectedSubject);
        } catch (SQLException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void fillTestimonyNote(String subject) throws SQLException{
        Integer idSchueler;
        Integer idZeugnis;
        Integer note=0;
        
        if (jComboBox4.getSelectedItem() != null) {
            idSchueler = Integer.parseInt( ( (String[]) jComboBox4.getSelectedItem())[1]);
            idZeugnis = connector._getIdZeugnis(idSchueler, hYear);
        }
        else{
            return;
        }
        if(subject.equals("Arbeitsverhalten")){
            note = connector.getNoteArbeit(idZeugnis);
            jComboBox6.setVisible(true);
        }
        if(subject.equals("Sozialverhalten")){
            note = connector.getNoteSozial(idZeugnis);
            jComboBox6.setVisible(true);
        }
        logger.fine("Hier müsste es doch gesetzt werden..."+note.toString());
        jComboBox6.setSelectedIndex(note);
        if(!subject.equals("Arbeitsverhalten") && !subject.equals("Sozialverhalten")){
            jComboBox6.setVisible(false);
        }
    }
    
    private void fillTestimonyTable(String subject) {
        DefaultTableModel tableModel = new javax.swing.table.DefaultTableModel(
                new String[]{
                    "Indikatoren", "Bewertung"
                }, 2);

        tableModel.addTableModelListener(this);
        jTable2.setModel(tableModel);
        TableColumn col = jTable2.getColumnModel().getColumn(1);
        col.setMinWidth(90);
        col.setMaxWidth(90);
        if (jComboBox4.getItemCount() > 0) {

            if (jComboBox4.getSelectedItem() == null) {
                jComboBox4.setSelectedItem(0);
            }

            try {
                TableColumn column = jTable2.getColumnModel().getColumn(1);
                column.setCellRenderer(new zeugnis.ComboBoxCellRenderer());

                if (selectedSubject.equals("Sozialverhalten")
                        || selectedSubject.equals("Arbeitsverhalten")) {
                    column.setCellEditor(new DefaultCellEditor(stringBox));
                } else {
                    column.setCellEditor(new DefaultCellEditor(imageBox));
                }

                int idKriteriumliste = connector._getIdZeugnis(Integer.parseInt(((String[]) jComboBox4.getSelectedItem())[1]), hYear);
                ArrayList<String[]> criteria = connector.getKriterien(0, subject);
                DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
                model.setRowCount(0);
                Object[] row = new Object[2];
                Iterator<String[]> it = criteria.iterator();
                tableModelEventEnabled = false;

                while (it.hasNext()) {
                    String[] array = it.next();
                    row[0] = new CritField(array[1], array[0]);
                    int bewertung = connector.getBewertung(idKriteriumliste, Integer.parseInt(array[0]));

                    if (bewertung == 0) {
                        row[1] = "";
                    } else if (bewertung < 4) {
                        row[1] = stringBox.getItemAt(bewertung);
                    } else if (bewertung > 3 && bewertung < 9) {
                        row[1] = imageBox.getItemAt(bewertung - 3);
                    } else {
                        row[1] = "Unzulässiger Wert";
                    }

                    model.addRow(row);
                }

                this.adjustColumnSize(jTable2, 1, 5);
                tableModelEventEnabled = true;
            } catch (SQLException ex) {
                logger.severe(ex.getLocalizedMessage());
            }

        }

    }

    private JComboBox getStringBox() {
        JComboBox stringComboBox = new JComboBox();
        stringComboBox.setModel(new javax.swing.DefaultComboBoxModel(new Object[]{
            "",
            "selten",
            "wechselnd",
            "überwiegend"}
        ));

        return stringComboBox;
    }

    private JComboBox getImageBox() {
        JComboBox imageComboBox = new JComboBox();
        imageComboBox.setRenderer(new DefaultListCellRenderer() {

            public Component getListCellRendererComponent(JList list,
                    Object value,
                    int index,
                    boolean isSelected,
                    boolean cellHasFocus) {

                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

                if (value instanceof java.lang.String) {
                    setText((String) value);
                    setIcon(null);
                } else if (value instanceof javax.swing.ImageIcon) {
                    setText("");
                    setIcon((ImageIcon) value);
                } else {
                    logger.severe("Unerwartetes Object beim Rendern der ComboBox:" + value.getClass().getName());
                }

                return this;
            }

        });

        imageComboBox.setModel(new javax.swing.DefaultComboBoxModel(new Object[]{
            "",
            getScaledImage((new ImageIcon(getClass().getResource("/zeugnis/pics/strich0.png"))).getImage(), 20, 20, "4"),
            getScaledImage((new ImageIcon(getClass().getResource("/zeugnis/pics/viertel0.png"))).getImage(), 20, 20, "5"),
            getScaledImage((new ImageIcon(getClass().getResource("/zeugnis/pics/halb0.png"))).getImage(), 20, 20, "6"),
            getScaledImage((new ImageIcon(getClass().getResource("/zeugnis/pics/dreiviertel0.png"))).getImage(), 20, 20, "7"),
            getScaledImage((new ImageIcon(getClass().getResource("/zeugnis/pics/voll0.png"))).getImage(), 20, 20, "8")}
        ));

        return imageComboBox;
    }

    private ImageIcon getScaledImage(Image srcImg, int w, int h, String desc) {
        BufferedImage resizedImg = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 = resizedImg.createGraphics();

        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2.drawImage(srcImg, 0, 0, w, h, null);
        g2.dispose();

        ImageIcon icon = new ImageIcon(resizedImg);
        icon.setDescription(desc);
        return icon;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JComboBox<String> jComboBox6;
    private javax.swing.JComboBox<String> jComboBox7;
    private javax.swing.JComboBox<String> jComboBox8;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void tableChanged(TableModelEvent e) {

        // Pruefen von welcher Tabelle das Event geworfen wird.
        // Geprueft wird anhand der Anzahle der Spalten.
        // 7 Spalten = Die Schuelertabelle
        // 2 Spalten = Die Zeugnistabelle
        // 4 Spalten = Die Kriteriumtabelle
        TableModel model = (TableModel) e.getSource();

        if (model.getColumnCount() == 7) {  // Schülertabelle

            if (e.getType() == TableModelEvent.UPDATE && tableModelEventEnabled) {
                int row = e.getFirstRow();
                int idColumn = 0;
                
                // Prüfen ob die Spalten Name, Vorname, Geburtsdatun Werte enthalten um eine idSchueler zu generieren
                // Wenn ja, über rows ermitteln ob es sich um ein update oder ein insert handelt.
                Object data0 = null, data1 = null, data2 = null, data3 = null, data4 = null;
                String string1, string2, string3;

                for (int i = 0; i < model.getColumnCount(); i++) {

                    switch (model.getColumnName(i)) {
                        case "Id":
                            data0 = model.getValueAt(row, i);
                            idColumn = i;
                            break;
                        case "Name":
                            data1 = model.getValueAt(row, i);
                            break;
                        case "Vorname":
                            data2 = model.getValueAt(row, i);
                            break;
                        case "Geburtsdatum":
                            data3 = model.getValueAt(row, i);
                            break;
                        case "Geburtsort":
                            data4 = model.getValueAt(row, i);
                            break;
                    }
                }

                if (data1 != null && !(string1 = (String) data1).isEmpty()
                        && data2 != null && !(string2 = (String) data2).isEmpty()
                        && data3 != null && !(string3 = (String) data3).isEmpty()) {
                    logger.fine("column0: " + string1 + " column1: " + string2 + " column2: " + string3);

                    // Datumstring zu SQLDatum konvertieren
                    Date date = null;
                    java.sql.Date sqlDate = null;

                    try {
                        date = sdf.parse(string3);
                        sqlDate = new java.sql.Date(date.getTime());
                    } catch (ParseException ex) {
                        logger.severe(ex.getLocalizedMessage());
                    }

                    String[] values = new String[6];
                    
                    values[0] = string1;
                    values[1] = string2;
                    values[2] = sqlDate.toString();
                    values[3] = (String) data4;
                    values[4] = (String) jComboBox3.getSelectedItem();
                    values[5] = ((String) jComboBox1.getSelectedItem()).substring(0, 4);

                    // pruefen ob name, vorname und gebort <= 30 Zeichen
                    boolean isTooLong=false; 
                    if(values[0].length()>30){
                        values[0]=values[0].substring(0, 30);
                        isTooLong=true;
                    }
                    if(values[1].length()>30){
                        values[1]=values[1].substring(0, 30);
                        isTooLong=true;
                    }
                    if(values[3].length()>30){
                        values[3]=values[3].substring(0, 30);
                        isTooLong=true;
                    }
                    if(isTooLong){
                        JOptionPane.showMessageDialog(null, "Achtung: Wert in der Datenbank wird auf 30 Zeichen begrenzt!");
                    }
                    try {
                        tableModelEventEnabled = false;
                        // insert
                        if (data0 == null || ((String) data0).isEmpty()) {

                            Integer idSchueler=0;
                            idSchueler = connector._insertSchueler(Gui.getSClass(),Gui.getSYear());
                            if(idSchueler > 0){
                                connector._updateSchueler(values, idSchueler);
                            }
                            // Die neue Id in die erste Spalte der Tabelle schreiben.
                            model.setValueAt(idSchueler.toString(), row, idColumn);

                            // update    
                        } else {
                            Integer idSchueler = Integer.parseInt((String)data0);
                            
                            connector._updateSchueler(values, idSchueler);
                            // Die neue Id in die erste Spalte der Tabelle schreiben.
                            //jTable1.getModel().setValueAt(idSchueler, row, idColumn);
                        }

                        tableModelEventEnabled = true;
                    } catch (SQLException ex) {
                        logger.severe(ex.getLocalizedMessage());
                    }
                }

            }

        }
        if (model.getColumnCount() == 2) { // Bewertung
            if (e.getType() == TableModelEvent.UPDATE && tableModelEventEnabled) {

                try {
                    int row = e.getFirstRow();
                    int idKriterium = ((CritField) model.getValueAt(row, 0)).getIdKriteriumInt();
                    int idKriteriumliste = connector._getIdZeugnis(Integer.parseInt(((String[]) jComboBox4.getSelectedItem())[1]), hYear);
                    Object value = model.getValueAt(row, 1);
                    int bewertung = 0;

                    if (value instanceof java.lang.String) {
                        switch ((String) value) {
                            case "selten":
                                bewertung = 1;
                                break;
                            case "wechselnd":
                                bewertung = 2;
                                break;
                            case "überwiegend":
                                bewertung = 3;
                                break;
                            default:
                                bewertung = 0;
                        }

                    } else if (value instanceof javax.swing.ImageIcon) {
                        bewertung = Integer.parseInt(((ImageIcon) value).getDescription());
                    } else {
                        logger.severe("Unerwartetes Objects beim Rendern des Tabellenfeldes: " + value.getClass().getName());
                    }

                    connector.updateBewertung(idKriteriumliste, idKriterium, bewertung);
                } catch (SQLException ex) {
                    logger.severe(ex.getLocalizedMessage());
                }
                // Anzeige, ob Vollständig ausgefüllt
                int idKriteriumliste = connector._getIdZeugnis(Integer.parseInt(((String[]) jComboBox4.getSelectedItem())[1]), hYear);

                try {
                    if (connector.isZeugnisComplete(idKriteriumliste)) {
                        jCheckBox1.setSelected(true);
                    } else {
                        jCheckBox1.setSelected(false);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } else {    // Kriterium und Lernbereich Tabellen
            if (model.getColumnCount() == 4) { // Kriterium
              if (e.getType() == TableModelEvent.UPDATE && tableModelEventEnabled) {
                int row = e.getFirstRow();
                int column = e.getColumn();
                
                if(column==3){
                    try {
                        // TODO
                        connector.updateKriteriumDB(jTable3,row,column);
                    } catch (SQLException ex) {
                        Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
              }
            }
        }
    }

    public static int getSYear() {
        //return (String)jComboBox1.getSelectedItem();
        return sYear;
    }

    public static int getHYear() {
        //return (String)jComboBox2.getSelectedItem();
        return hYear;
    }

    public static String getSClass() {
        return sClass;
    }

    public static String getSelectedSubject() {
        return selectedSubject;
    }

    /**
     * convert a Date (dt) from an old format (i.e. "dd.MM.yyyy") into a new
     * format (i.e. "yyyy-MM-dd")
     *
     * @param oldFormat
     * @param newFormat
     * @param dt
     * @return
     */
    public static String convertDate(String oldFormat, String newFormat, String dateString) throws ParseException {
        SimpleDateFormat odf;
        SimpleDateFormat ndf;
        String result;
        odf = new SimpleDateFormat(oldFormat);
        ndf = new SimpleDateFormat(newFormat);
        Date dt = odf.parse(dateString);
        result = ndf.format(dt);

        return result;
    }

private void adjustColumnSize(JTable table, int column, int margin) {
        DefaultTableColumnModel colModel = (DefaultTableColumnModel) table.getColumnModel();
        TableColumn col = colModel.getColumn(column);
        int width;

        TableCellRenderer renderer = col.getHeaderRenderer();
        
        if (renderer == null) {
            renderer = table.getTableHeader().getDefaultRenderer();
        }
        
        Component comp = renderer.getTableCellRendererComponent(
                table, col.getHeaderValue(), false, false, 0, 0);
        width = comp.getPreferredSize().width;

        for (int r = 0; r < table.getRowCount(); r++) {
            renderer = table.getCellRenderer(r, column);
            comp = renderer.getTableCellRendererComponent(
                    table, table.getValueAt(r, column), false, false, r, column);
            int currentWidth = comp.getPreferredSize().width;
            width = Math.max(width, currentWidth);
        }

        width += 2 * margin;

        col.setPreferredWidth(width);
    }

}

class CritField extends JLabel {

    private String idKriterium;

    public CritField(String text, String idKriterium) {
        super(text);
        this.idKriterium = idKriterium;
    }

    public String getIdKriterium() {
        return idKriterium;
    }

    public int getIdKriteriumInt() {
        return Integer.parseInt(idKriterium);
    }

    @Override
    public String toString() {
        return this.getText();
    }

}
